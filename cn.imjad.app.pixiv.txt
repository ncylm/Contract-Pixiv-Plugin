.版本 2
.支持库 eAPI

.程序集 程序集1

.子程序 _启动子程序, 整数型
.局部变量 sz, 文本型, , "0"
.局部变量 测试, 文本型
.局部变量 作品详情, 文本型
.局部变量 now, 日期时间型
.局部变量 年, 文本型
.局部变量 月, 文本型
.局部变量 日, 文本型
.局部变量 date, 文本型

' PixivSearch (“宫园薰”, sz)
' PixivGet (“57210427”, sz)

' 作品详情 ＝ “ID:” ＋ sz [1] ＋ “ 作品：” ＋ sz [2] ＋ “ 投稿：” ＋ sz [6] ＋ “ @ ” ＋ sz [3]
' 测试 ＝ 子文本替换 (#PIXIV_O, “{id}”, sz [1], , , 真)
' 测试 ＝ 子文本替换 (测试, “{image_url}”, sz [4], , , 真)
' 测试 ＝ 子文本替换 (测试, “{详情}”, 作品详情, , , 真)
' 调试输出 (sz)
' 调试输出 (测试)
' 调试输出 (nsfw_check (sz))

' now ＝ 取现行时间 ()
' 年 ＝ 到文本 (取年份 (Unix时间戳记反转 (Unix时间戳记正转 (now) － 172800)))
' 月 ＝ 取文本右边 (“00” ＋ 到文本 (取月份 (Unix时间戳记反转 (Unix时间戳记正转 (now) － 172800))), 2)
' 日 ＝ 取文本右边 (“00” ＋ 到文本 (取日 (Unix时间戳记反转 (Unix时间戳记正转 (now) － 172800))), 2)
' date ＝ 到文本 (年 ＋ “-” ＋ 月 ＋ “-” ＋ 日)
' 调试输出 (date)
返回 (0)

.子程序 Information, 文本型, 公开,  插件基础信息在这里返回 //本函数【禁止】处理其他任何代码

' 请编辑常量 #插件信息(json格式)，设置应用信息、过滤器
' 其中 appid 需与文件名(不含后缀)一致, 如appid=com.contract.testapp, 则文件名为com.contract.testapp.qyk
' version_id 每次公开更新至少+1,

' 本函数【禁止】处理其他任何代码，以免发生异常情况。如需执行初始化代码请在Startup事件中执行（Type=1001）。
返回 (#插件信息)

.子程序 插件说明, , , 附加说明

' ------插件权限值组
' 20,100,101,102,103,110
' 20  插件本身认证 没有这个将无法载入插件列表 必须放在第一位
' 100 api基本调用权 没有这个将无法调用所有api 可以乱序
' 110 取Cookie权 可以乱序
' 101 发送好友消息权 可以乱序
' 102 发送群消息权   可以乱序
' 103 发送群临时消息权 可以乱序
' 104 发送讨论组消息权 可以乱序
' 105 发送讨论组临时消息权 可以乱序
' 106 发送对象和Music消息权 可以乱序'
' ------插件优先级
' priority 优先级 只能设定10000,30000俩个值,设定其他值一律不处理。
' 10000 最高优先级 建议在插件说明
' 30000 正常优先级
' ------插件face表情（默认表情）
' [LQ:face,id=0] /惊讶
' [LQ:face,id=1] /难过
' [LQ:face,id=*] 以此类推最大170
' ------插件emoji表情（符号表情）测试中
' [LQ:emoji,id=0]
' [LQ:emoji,id=*]

.子程序 Initialize, 整数型, 公开,  应用AuthCode接收 //本函数【禁止】处理其他任何代码，请不要改动本函数
.参数 AuthCode, 整数型
.局部变量 AuthRet, 整数型

' 调用 Information函数 获取应用信息后，如果启用该应用，将会调用这个函数并传递AuthCode。如果选择停用 也会调用这个函数并传递AuthCode值为0
AuthRet ＝ 功能.其他_置AuthCode (AuthCode)
.如果真 (AuthRet ≠ 0)
    返回 (AuthRet)
.如果真结束
置错误提示管理 (&LQ_错误提示管理)
' 本函数【禁止】处理其他任何代码，以免发生异常情况。如需执行初始化代码请在Startup事件中执行（Type=1001）。
返回 (0)  ' 请固定返回0

.子程序 set, 整数型, 公开

' 本子程序会在【主线程】中被调用。
应用目录 ＝ 功能.取应用目录 ()
信息框 (“配置文件为” ＋ 应用目录 ＝ “Pixiv.ini”, #信息图标, , )
.如果真 (信息框 (“是否重载配置？”, #是否钮 ＋ #询问图标 ＋ #默认按钮一, , ) ＝ #是钮)
    写配置文件 ()
    信息框 (“重载配置完成”, #信息图标, , )
.如果真结束
返回 (0)

.子程序 写配置文件
.参数 节点, 文本型, 可空
.参数 待设置项, 文本型, 可空
.参数 值, 文本型, 可空
.局部变量 配置, 文本型

应用目录 ＝ 功能.取应用目录 ()
配置 ＝ 应用目录 ＋ “\Pixiv.ini”
.判断开始 (文件是否存在 (配置))
    全_指令_一图 ＝ 读配置项 (配置, “指令配置”, “一图”, “一图”)
    .如果真 (全_指令_一图 ＝ “”)
        全_指令_一图 ＝ “一图”  ' 默认指令
    .如果真结束
    全_指令_最新 ＝ 读配置项 (配置, “指令配置”, “最新”, “最新”)
    .如果真 (全_指令_最新 ＝ “”)
        全_指令_最新 ＝ “最新”  ' 默认指令
    .如果真结束
    全_指令_点图 ＝ 读配置项 (配置, “指令配置”, “点图”, “点图”)
    .如果真 (全_指令_点图 ＝ “”)
        全_指令_点图 ＝ “点图”  ' 默认指令
    .如果真结束
    全_指令_搜图 ＝ 读配置项 (配置, “指令配置”, “搜图”, “搜图”)
    .如果真 (全_指令_搜图 ＝ “”)
        全_指令_搜图 ＝ “搜图”  ' 默认指令
    .如果真结束
    全_指令_设置类型 ＝ 读配置项 (配置, “指令配置”, “设置类型”, “设置类型”)
    .如果真 (全_指令_点图姬 ＝ “”)
        全_指令_点图姬 ＝ “点图姬”  ' 默认指令
    .如果真结束
    全_指令_设置类型 ＝ 读配置项 (配置, “指令配置”, “设置类型”, “设置类型”)
    .如果真 (全_指令_设置类型 ＝ “”)
        全_指令_设置类型 ＝ “设置类型”  ' 默认指令
    .如果真结束
    全_指令_设置返回数量 ＝ 读配置项 (配置, “指令配置”, “设置返回数量”, “设置返回数量”)
    .如果真 (全_指令_设置返回数量 ＝ “”)
        全_指令_设置返回数量 ＝ “设置返回数量”  ' 默认指令
    .如果真结束
    全_指令_设置NSFW ＝ 读配置项 (配置, “指令配置”, “设置NSFW”, “设置NSFW”)
    .如果真 (全_指令_设置NSFW ＝ “”)
        全_指令_设置NSFW ＝ “设置NSFW”  ' 默认指令
    .如果真结束
    全_排行榜_类型 ＝ 读配置项 (配置, “排行榜”, “类型”, “weekly”)
    .如果真 (全_排行榜_类型 ＝ “”)
        全_排行榜_类型 ＝ “weekly”  ' 默认指令
    .如果真结束
    全_排行榜_返回数量 ＝ 读配置项 (配置, “排行榜”, “返回数量”, “20”)
    .如果真 (全_排行榜_返回数量 ≠ 到文本 (到数值 (全_排行榜_返回数量)) 或 全_排行榜_返回数量 ＝ “”)  ' 非整数数字或为空
        全_排行榜_返回数量 ＝ “20”  ' 默认指令
    .如果真结束
    全_杂项_NSFW ＝ 读配置项 (配置, “杂项”, “NSFW”, “禁止”)
    .如果真 (全_杂项_NSFW ＝ “”)
        全_杂项_NSFW ＝ “禁止”  ' 默认
    .如果真结束

    .如果真 (待设置项 ≠ “” 且 值 ≠ “”)
        写配置项 (配置, 节点, 待设置项, 值)
        写配置文件 ()
    .如果真结束

.默认
    写配置项 (配置, “指令配置”, “一图”, “一图”)
    写配置项 (配置, “指令配置”, “最新”, “最新”)
    写配置项 (配置, “指令配置”, “点图”, “点图”)
    写配置项 (配置, “指令配置”, “搜图”, “搜图”)
    写配置项 (配置, “指令配置”, “点图姬”, “点图姬”)
    写配置项 (配置, “指令配置”, “设置类型”, “设置类型”)
    写配置项 (配置, “指令配置”, “设置返回数量”, “设置返回数量”)
    写配置项 (配置, “指令配置”, “设置NSFW”, “设置NSFW”)
    写配置项 (配置, “排行榜”, “类型”, “weekly”)
    写配置项 (配置, “排行榜”, “返回数量”, “20”)
    写配置项 (配置, “杂项”, “NSFW”, “禁止”)
    全_指令_一图 ＝ “一图”  ' 默认指令
    全_指令_最新 ＝ “最新”  ' 默认指令
    全_指令_点图 ＝ “点图”  ' 默认指令
    全_指令_搜图 ＝ “搜图”  ' 默认指令
    全_指令_点图姬 ＝ “点图姬”  ' 默认指令
    全_指令_设置类型 ＝ “设置类型”  ' 默认指令
    全_指令_设置返回数量 ＝ “设置返回数量”  ' 默认指令
    全_指令_设置NSFW ＝ “设置NSFW”  ' 默认指令
    全_排行榜_类型 ＝ “weekly”  ' 默认
    全_排行榜_返回数量 ＝ “20”  ' 默认
    全_杂项_NSFW ＝ “禁止”  ' 默认
.判断结束
取文件版本信息 (功能.取主程序运行目录 () ＋ “\plugin\cn.imjad.app.pixiv.qyk.dll”, 全_版本信息)


.子程序 _eventStartup, 整数型, 公开,  Type=1001 启动

' 本子程序会在【主线程】中被调用。
' 无论本应用是否被启用，本函数都会在酷Q启动后执行一次，请在这里执行插件初始化代码。
' 请务必尽快返回本子程序，否则会卡住其他插件以及主程序的加载。
写配置文件 ()
' 获取应用数据目录
' 返回如：D:\CoolQ\app\com.coxxs.testapp\
' 应用的所有数据、配置【必须】存放于此目录，避免给用户带来困扰。
返回 (0)  ' 请固定返回0

.子程序 _eventPrivateMsg, 整数型, 公开, Type=21 私聊消息
.参数 subType, 文本型, , 子类型，11/来自好友 1/来自在线状态 2/来自群 3/来自讨论组 4/来自公众号
.参数 sendTime, 文本型, , 发送时间(时间戳)
.参数 fromQQ, 文本型, , 来源QQ
.参数 fromID, 文本型, , 来源群号 或 讨论组ID 仅子类型为2/3/时使用
.参数 msg, 文本型, , 消息内容
.参数 Info, 文本型, , 信息
.局部变量 发送内容, 文本型

' 本子程序会在【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
' 这里处理消息
.如果真 (是否含有允许的指令 (msg))
    全_fromGroup ＝ fromID
    全_fromQQ ＝ fromQQ
    发送内容 ＝ 获取待发送内容 (msg, 真)
    ' 如果 (是否为XML (发送内容))
    .判断开始 (subType ＝ “2”)  ' 来自群临时消息
        功能.sendObjectMsg (3, 到长整数 (fromID), 到长整数 (fromQQ), 发送内容)
    .判断 (subType ＝ “3”)  ' 来自讨论组临时消息
        功能.sendObjectMsg (5, 到长整数 (fromID), 到长整数 (fromQQ), 发送内容)
    .判断 (subType ＝ “11”)  ' 来自好友消息
        功能.sendObjectMsg (1, 到长整数 (fromQQ), 到长整数 (fromQQ), 发送内容)
    .默认

    .判断结束

    ' 判断 (subType ＝ “2”)  ' 来自群临时消息
    ' 功能.发送群临时消息 (到长整数 (fromID), 到长整数 (fromQQ), 发送内容)
    ' 判断 (subType ＝ “3”)  ' 来自讨论组临时消息
    ' 功能.发送讨论组临时消息 (到长整数 (fromID), 到长整数 (fromQQ), 发送内容)
    ' 判断 (subType ＝ “11”)  ' 来自好友消息
    ' 功能.发送好友消息 (到长整数 (fromQQ), 发送内容)



.如果真结束

' 返回值*不能*直接返回文本
' 如果要回复消息，请调用api发送，并且这里 返回(#消息_拦截) - 截断本条消息，不再继续处理 //注意：应用优先级设置为"最高"(10000)时，不得使用本返回值
' 如果不回复消息，交由之后的应用/过滤器处理，这里 返回(#消息_忽略) - 忽略本条消息
返回 (#消息_忽略)

.子程序 _eventGroupMsg, 整数型, 公开, Type=2 群消息
.参数 subType, 文本型, , 子类型，目前固定为1
.参数 sendTime, 文本型, , 发送时间(时间戳)
.参数 fromGroup, 文本型, , 来源群号
.参数 fromQQ, 文本型, , 来源QQ号
.参数 fromAnonymous, 文本型, , 来源匿名者 正常消息群名片
.参数 msg, 文本型, , 消息内容
.参数 Info, 文本型, , 信息
.局部变量 发送内容, 文本型

.如果真 (是否含有允许的指令 (msg))
    全_fromGroup ＝ fromGroup
    全_fromQQ ＝ fromQQ
    发送内容 ＝ 获取待发送内容 (msg, 假)
    .如果 (是否为XML (发送内容))
        功能.sendObjectMsg (2, 到长整数 (fromGroup), 到长整数 (fromQQ), 发送内容)
    .否则
        功能.发送群消息 (到长整数 (fromGroup), 发送内容)
    .如果结束

.如果真结束
' 本子程序会在【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventFriendMsg”子程序

.子程序 _eventDiscussMsg, 整数型, 公开, Type=4 讨论组消息
.参数 subtype, 文本型, , 子类型，目前固定为1
.参数 sendTime, 文本型, , 发送时间(时间戳)
.参数 fromDiscuss, 文本型, , 来源讨论组
.参数 fromQQ, 文本型, , 来源QQ号
.参数 msg, 文本型, , 消息内容
.参数 Info, 文本型, , 信息
.局部变量 发送内容, 文本型

' 本子程序会在【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
' 这里处理消息
.如果真 (是否含有允许的指令 (msg))
    全_fromGroup ＝ fromDiscuss
    全_fromQQ ＝ fromQQ
    发送内容 ＝ 获取待发送内容 (msg, 假)
    .如果 (是否为XML (发送内容))
        功能.sendObjectMsg (4, 到长整数 (fromDiscuss), 到长整数 (fromQQ), 发送内容)
    .否则
        功能.发送讨论组消息 (到长整数 (fromDiscuss), 发送内容)
    .如果结束

.如果真结束

返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventFriendMsg”子程序

.子程序 PixivGet, 逻辑型, , 1作品ID，2作品标题，3作品创建时间，4图片URL，5作者ID，6作者用户名，7年龄限制
.参数 id, 文本型, , 作品ID
.参数 作品相关数组, 文本型, 参考 数组, 作品相关数组
.局部变量 json, 类_json
.局部变量 url, 文本型
.局部变量 data, 文本型

url ＝ “https://api.imjad.cn/pixiv/v1/?type=illust&json_encode=JSON_UNESCAPED_UNICODE&id=” ＋ id
data ＝ 功能.LQ转码Utf8ToAnsi (网页_访问 (url, 0, , , , “User-Agent: cn.imjad.app.pixiv/” ＋ 全_版本信息.文件版本 ＋ “ ” ＋ 全_fromGroup ＋ “/” ＋ 全_fromQQ, , , , ))

json.解析 (data)
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].id”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].title”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].created_time”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].image_urls.px_480mw”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].user.id”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].user.name”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].age_limit”)))
返回 (真)

.子程序 PixivLatest, 逻辑型, , 1作品ID，2作品标题，3作品创建时间，4图片URL，5作者ID，6作者用户名，7年龄限制
.参数 作品相关数组, 文本型, 参考 数组, 作品相关数组
.局部变量 json, 类_json
.局部变量 url, 文本型
.局部变量 data, 文本型

url ＝ “https://api.imjad.cn/pixiv/v1/?type=latest&json_encode=JSON_UNESCAPED_UNICODE&per_page=1”
data ＝ 功能.LQ转码Utf8ToAnsi (网页_访问 (url, 0, , , , “User-Agent: cn.imjad.app.pixiv/” ＋ 全_版本信息.文件版本 ＋ “ ” ＋ 全_fromGroup ＋ “/” ＋ 全_fromQQ, , , , ))

json.解析 (data)
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].id”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].title”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].created_time”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].image_urls.px_480mw”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].user.id”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].user.name”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].age_limit”)))
返回 (真)

.子程序 PixivRank, 逻辑型, , 1作品ID，2作品标题，3作品创建时间，4图片URL，5作者ID，6作者用户名，7年龄限制
.参数 作品相关数组, 文本型, 参考 数组, 作品相关数组
.参数 mode, 文本型, 可空, 排行榜类型
.参数 per_page, 整数型, 可空, 指定每页返回数量
.局部变量 json, 类_json
.局部变量 url, 文本型
.局部变量 data, 文本型
.局部变量 i, 文本型
.局部变量 now, 日期时间型
.局部变量 年, 文本型
.局部变量 月, 文本型
.局部变量 日, 文本型
.局部变量 date, 文本型

.如果真 (是否为允许的排行榜类型 (mode) ＝ 假)
    mode ＝ “weekly”
.如果真结束

.如果真 (per_page ≤ 0 或 per_page ≥ 50)
    per_page ＝ 20
.如果真结束

' pixiv的排行榜的“今日”为前天
now ＝ 取现行时间 ()
年 ＝ 到文本 (取年份 (Unix时间戳记反转 (Unix时间戳记正转 (now) － 172800)))
月 ＝ 取文本右边 (“00” ＋ 到文本 (取月份 (Unix时间戳记反转 (Unix时间戳记正转 (now) － 172800))), 2)
日 ＝ 取文本右边 (“00” ＋ 到文本 (取日 (Unix时间戳记反转 (Unix时间戳记正转 (now) － 172800))), 2)
date ＝ 到文本 (年 ＋ “-” ＋ 月 ＋ “-” ＋ 日)
url ＝ “https://api.imjad.cn/pixiv/v1/?type=rank&json_encode=JSON_UNESCAPED_UNICODE&mode=” ＋ mode ＋ “&per_page=” ＋ 到文本 (per_page) ＋ “&date=” ＋ date
data ＝ 功能.LQ转码Utf8ToAnsi (网页_访问 (url, 0, , , , “User-Agent: cn.imjad.app.pixiv/” ＋ 全_版本信息.文件版本 ＋ “ ” ＋ 全_fromGroup ＋ “/” ＋ 全_fromQQ, , , , ))

json.解析 (data)
置随机数种子 ()
i ＝ 到文本 (取随机数 (1, per_page) － 1)
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].works[” ＋ i ＋ “].work.id”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].works[” ＋ i ＋ “].work.title”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].works[” ＋ i ＋ “].work.created_time”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].works[” ＋ i ＋ “].work.image_urls.px_480mw”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].works[” ＋ i ＋ “].work.user.id”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].works[” ＋ i ＋ “].work.user.name”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“response[0].works[” ＋ i ＋ “].work.age_limit”)))
返回 (真)

.子程序 PixivSearch, 逻辑型, , 1作品ID，2作品标题，3作品创建时间，4图片URL，5作者ID，6作者用户名，7年龄限制
.参数 keyword, 文本型, , 关键词
.参数 作品相关数组, 文本型, 参考 数组, 作品相关数组
.局部变量 json, 类_json
.局部变量 url, 文本型
.局部变量 data, 文本型
.局部变量 num, 整数型
.局部变量 i, 文本型
.局部变量 _sz, 文本型, , "0"

' 服务端已做相应处理
url ＝ “https://api.imjad.cn/pixiv/v1/?type=search&page=1&json_encode=JSON_UNESCAPED_UNICODE&word=” ＋ 编码_URL编码 (到文本 (功能.LQ转码AnsiToUtf8 (keyword)))
data ＝ 功能.LQ转码Utf8ToAnsi (网页_访问 (url, 0, , , , “User-Agent: cn.imjad.app.pixiv/” ＋ 全_版本信息.文件版本 ＋ “ ” ＋ 全_fromGroup ＋ “/” ＋ 全_fromQQ, , , , ))
json.解析 (data)
置随机数种子 ()
i ＝ 到文本 (取随机数 (1, json.取属性 (“illusts”).成员数 ()) － 1)
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“illusts[” ＋ i ＋ “].id”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“illusts[” ＋ i ＋ “].title”)))
' 搜索接口返回的图片地址会报403，因此使用id重新获取一次
PixivGet (json.取通用属性 (“illusts[” ＋ i ＋ “].id”), _sz)
' 搜索接口返回的日期不一致
加入成员 (作品相关数组, 到文本 (_sz [3]))  ' 作品创建时间
加入成员 (作品相关数组, 到文本 (_sz [4]))  ' 图片URL
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“illusts[” ＋ i ＋ “].user.id”)))
加入成员 (作品相关数组, 到文本 (json.取通用属性 (“illusts[” ＋ i ＋ “].user.name”)))
加入成员 (作品相关数组, 到文本 (_sz [7]))  ' 作品年龄限制
返回 (真)

.子程序 nsfw_check, 逻辑型, , r18 r18-g 时为真
.参数 作品相关数组, 文本型, 数组

.如果真 (全_杂项_NSFW ≠ “允许”)
    .如果 (作品相关数组 [7] ＝ “r18” 或 作品相关数组 [7] ＝ “r18-g”)
        返回 (真)
    .否则
        返回 (假)
    .如果结束

.如果真结束
返回 (假)

.子程序 是否含有允许的指令, 逻辑型
.参数 msg, 文本型
.参数 source, 文本型, 可空
.局部变量 允许的指令, 文本型, , "0"
.局部变量 临_循环记录1, 整数型

加入成员 (允许的指令, 全_指令_一图)
加入成员 (允许的指令, 全_指令_最新)
加入成员 (允许的指令, 全_指令_点图)
加入成员 (允许的指令, 全_指令_搜图)
加入成员 (允许的指令, 全_指令_设置类型)
加入成员 (允许的指令, 全_指令_设置返回数量)
加入成员 (允许的指令, 全_指令_设置NSFW)
加入成员 (允许的指令, 全_指令_点图姬)
.计次循环首 (取数组成员数 (允许的指令), 临_循环记录1)
    .如果真 (寻找文本 (msg, 允许的指令 [临_循环记录1], , 真) ≠ -1 且 取文本长度 (msg) ＞ 2)
        临_循环记录1 ＝ -1
        跳出循环 ()
    .如果真结束

.计次循环尾 ()
.如果 (临_循环记录1 ＝ -1)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 是否为允许的排行榜类型, 逻辑型
.参数 mode, 文本型
.局部变量 允许的排行榜类型, 文本型, , "0"
.局部变量 临_循环记录1, 整数型

加入成员 (允许的排行榜类型, “daily”)
加入成员 (允许的排行榜类型, “weekly”)
加入成员 (允许的排行榜类型, “monthly”)
加入成员 (允许的排行榜类型, “rookie”)
加入成员 (允许的排行榜类型, “original”)
加入成员 (允许的排行榜类型, “male”)
加入成员 (允许的排行榜类型, “female”)
加入成员 (允许的排行榜类型, “daily_r18”)
加入成员 (允许的排行榜类型, “weekly_r18”)
加入成员 (允许的排行榜类型, “male_r18”)
加入成员 (允许的排行榜类型, “female_r18”)
加入成员 (允许的排行榜类型, “r18g”)
.计次循环首 (取数组成员数 (允许的排行榜类型), 临_循环记录1)
    .如果真 (寻找文本 (mode, 允许的排行榜类型 [临_循环记录1], , 真) ≠ -1 且 取文本长度 (mode) ≥ 4)
        临_循环记录1 ＝ -1
        跳出循环 ()
    .如果真结束

.计次循环尾 ()
.如果 (临_循环记录1 ＝ -1)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 是否为XML, 逻辑型
.参数 结构化消息, 文本型

.判断开始 (寻找文本 (结构化消息, “xml version=”, , 真) ≠ -1)
    返回 (真)
.默认
    返回 (假)
.判断结束
返回 (假)

.子程序 获取待发送内容, 文本型
.参数 msg, 文本型
.参数 isPrivateMsg, 逻辑型
.局部变量 PIXIV_XML, 文本型
.局部变量 PIXIV_E_XML, 文本型
.局部变量 PIXIV_HELP, 文本型
.局部变量 作品详情, 文本型
.局部变量 作品相关数组, 文本型, , "0"
.局部变量 被查找内容, 文本型
.局部变量 发送内容, 文本型
.局部变量 排行榜_类型, 文本型

PIXIV_HELP ＝ #PIXIV_HELP
PIXIV_XML ＝ #PIXIV_O
PIXIV_E_XML ＝ #PIXIV_E_O

.判断开始 (msg ＝ 全_指令_点图姬)
    .判断开始 (全_排行榜_类型 ＝ “daily”)
        排行榜_类型 ＝ “日榜”
    .判断 (全_排行榜_类型 ＝ “weekly”)
        排行榜_类型 ＝ “周榜”
    .判断 (全_排行榜_类型 ＝ “monthly”)
        排行榜_类型 ＝ “月榜”
    .判断 (全_排行榜_类型 ＝ “rookie”)
        排行榜_类型 ＝ “新人榜”
    .判断 (全_排行榜_类型 ＝ “original”)
        排行榜_类型 ＝ “原创榜”
    .判断 (全_排行榜_类型 ＝ “male”)
        排行榜_类型 ＝ “男性向”
    .判断 (全_排行榜_类型 ＝ “female”)
        排行榜_类型 ＝ “女性向”
    .判断 (全_排行榜_类型 ＝ “daily_r18”)
        排行榜_类型 ＝ “R18日榜”
    .判断 (全_排行榜_类型 ＝ “weekly_r18”)
        排行榜_类型 ＝ “R18周榜”
    .判断 (全_排行榜_类型 ＝ “male_r18”)
        排行榜_类型 ＝ “R18男性向”
    .判断 (全_排行榜_类型 ＝ “female_r18”)
        排行榜_类型 ＝ “R18女性向”
    .判断 (全_排行榜_类型 ＝ “r18g”)
        排行榜_类型 ＝ “怪诞作品”
    .默认
        排行榜_类型 ＝ “未知”
    .判断结束
    发送内容 ＝ 子文本替换 (PIXIV_HELP, “{VERSION}”, 全_版本信息.文件版本, , , 真)
    发送内容 ＝ 子文本替换 (发送内容, “{指令_一图}”, 全_指令_一图, , , 真)
    发送内容 ＝ 子文本替换 (发送内容, “{RANK_TYPE}”, 排行榜_类型, , , 真)
    发送内容 ＝ 子文本替换 (发送内容, “{RANK_NUM}”, 全_排行榜_返回数量, , , 真)
    发送内容 ＝ 子文本替换 (发送内容, “{指令_最新}”, 全_指令_最新, , , 真)
    发送内容 ＝ 子文本替换 (发送内容, “{指令_搜图}”, 全_指令_搜图, , , 真)
    发送内容 ＝ 子文本替换 (发送内容, “{指令_点图}”, 全_指令_点图, , , 真)
    发送内容 ＝ 子文本替换 (发送内容, “{指令_设置类型}”, 全_指令_设置类型, , , 真)
    发送内容 ＝ 子文本替换 (发送内容, “{指令_设置返回数量}”, 全_指令_设置返回数量, , , 真)
    ' 发送内容 ＝ 子文本替换 (发送内容, “{指令_设置NSFW}”, 全_指令_设置NSFW, , , 真)
.判断 (msg ＝ 全_指令_一图)
    ' 1作品ID，2作品标题，3作品创建时间，4图片URL，5作者ID，6作者用户名，7年龄限制
    PixivRank (作品相关数组, 全_排行榜_类型, 到整数 (全_排行榜_返回数量))
    发送内容 ＝ 获取作品XML (PIXIV_XML, 作品相关数组)
.判断 (msg ＝ 全_指令_最新)
    PixivLatest (作品相关数组)
    发送内容 ＝ 获取作品XML (PIXIV_XML, 作品相关数组)
.判断 (寻找文本 (msg, 全_指令_点图, , 真) ≠ -1)
    被查找内容 ＝ 文本区分_只取数字 (文本_取右边 (删首尾空 (msg), 全_指令_点图, ))
    .如果 (被查找内容 ≠ “”)
        PixivGet (被查找内容, 作品相关数组)
        发送内容 ＝ 获取作品XML (PIXIV_XML, 作品相关数组)
        .如果真 (作品相关数组 [1] ＝ “”)
            发送内容 ＝ 子文本替换 (PIXIV_E_XML, “{TITLE}”, “404 Not Found”, , , 真)
            发送内容 ＝ 子文本替换 (发送内容, “{DESC}”, “有些事也许一开始就是错的！（PS：你请求的内容不存在，请尝试更换ID）发送「” ＋ 全_指令_点图姬 ＋ “」查看帮助信息”, , , 真)
        .如果真结束

    .否则
        发送内容 ＝ 子文本替换 (PIXIV_E_XML, “{TITLE}”, “400 Bad Request”, , , 真)
        发送内容 ＝ 子文本替换 (发送内容, “{DESC}”, “点图姬无法理解你的请求！（PS：请检查ID是否输入正确）发送「” ＋ 全_指令_点图姬 ＋ “」查看帮助信息”, , , 真)
    .如果结束

.判断 (寻找文本 (msg, 全_指令_搜图, , 真) ≠ -1)
    被查找内容 ＝ 删首尾空 (文本_取右边 (删首尾空 (msg), 全_指令_搜图, ))
    PixivSearch (被查找内容, 作品相关数组)
    发送内容 ＝ 获取作品XML (PIXIV_XML, 作品相关数组)
    .如果真 (作品相关数组 [1] ＝ “”)
        发送内容 ＝ 子文本替换 (PIXIV_E_XML, “{TITLE}”, “404 Not Found”, , , 真)
        发送内容 ＝ 子文本替换 (发送内容, “{DESC}”, “有些事也许一开始就是错的！（PS：你检索的内容不存在，请尝试更换关键字）发送「” ＋ 全_指令_点图姬 ＋ “」查看帮助信息”, , , 真)
    .如果真结束

.判断 (寻找文本 (msg, 全_指令_设置类型, , 真) ≠ -1)
    被查找内容 ＝ 删首尾空 (文本_取右边 (删首尾空 (msg), 全_指令_设置类型, ))
    .如果 (是否为允许的排行榜类型 (被查找内容))
        写配置文件 (“排行榜”, “类型”, 被查找内容)
        发送内容 ＝ “排行榜类型已设置为” ＋ 被查找内容
    .否则
        发送内容 ＝ “不允许的排行榜类型”
    .如果结束

.判断 (寻找文本 (msg, 全_指令_设置返回数量, , 真) ≠ -1)
    被查找内容 ＝ 删首尾空 (文本_取右边 (删首尾空 (msg), 全_指令_设置返回数量, ))
    .如果 (到整数 (被查找内容) ≤ 50 且 到整数 (被查找内容) ≥ 1)
        写配置文件 (“排行榜”, “返回数量”, 被查找内容)
        发送内容 ＝ “排行榜返回数量已设置为” ＋ 被查找内容
    .否则
        发送内容 ＝ “排行榜返回数量超出可定义范围（1~50）”
    .如果结束

.判断 (寻找文本 (msg, 全_指令_设置NSFW, , 真) ≠ -1)
    被查找内容 ＝ 删首尾空 (文本_取右边 (删首尾空 (msg), 全_指令_设置NSFW, ))
    .如果 (被查找内容 ＝ “禁止”)
        写配置文件 (“杂项”, “NSFW”, 被查找内容)
        发送内容 ＝ “NSFW已设置为” ＋ 被查找内容
    .否则
        发送内容 ＝ “不允许的值”
    .如果结束

.默认

.判断结束

.如果真 (取数组成员数 (作品相关数组) ≥ 1)
    .如果真 (isPrivateMsg ≠ 真 且 nsfw_check (作品相关数组))
        发送内容 ＝ 子文本替换 (PIXIV_E_XML, “{TITLE}”, “451 Unavailable For Legal Reasons”, , , 真)
        发送内容 ＝ 子文本替换 (发送内容, “{DESC}”, “基于群组规定，点图姬不能向你展示该内容！（发送「” ＋ 全_指令_点图姬 ＋ “」查看帮助信息）”, , , 真)
    .如果真结束

.如果真结束

返回 (发送内容)


.子程序 获取作品XML, 文本型
.参数 XML, 文本型
.参数 作品相关数组, 文本型, 数组
.局部变量 结果, 文本型

结果 ＝ 子文本替换 (XML, “{image_id}”, 作品相关数组 [1], , , 真)
结果 ＝ 子文本替换 (结果, “{image_title}”, 转义 (作品相关数组 [2]), , , 真)
结果 ＝ 子文本替换 (结果, “{image_date}”, 作品相关数组 [3], , , 真)
结果 ＝ 子文本替换 (结果, “{image_url}”, 转义 (作品相关数组 [4]), , , 真)
结果 ＝ 子文本替换 (结果, “{image_member}”, 转义 (作品相关数组 [6]), , , 真)
返回 (结果)

.子程序 转义, 文本型
.参数 内容, 文本型

内容 ＝ 子文本替换 (内容, “<”, “&lt;”, , , 真)
内容 ＝ 子文本替换 (内容, “>”, “&gt;”, , , 真)
' 内容 ＝ 子文本替换 (内容, #引号, “&quot;”, , , 真)
' 内容 ＝ 子文本替换 (内容, “'”, “&apos;”, , , 真)
内容 ＝ 子文本替换 (内容, “&”, “&amp;”, , , 真)
返回 (内容)

.子程序 Unix时间戳记正转, 长整数型, , 将时间类型值转到长整型的标准UNIX使用的格林威治时间戳记
.参数 时间值, 日期时间型, , 要转换的时间值
.参数 是否为秒, 逻辑型, 可空, 设置返回的时间戳记值单位 真：秒  假：毫秒   默认为真
.参数 是否为北京时间, 逻辑型, 可空, 默认为真
.局部变量 初始时间, 日期时间型

.如果真 (是否为空 (是否为北京时间))
    是否为北京时间 ＝ 真
.如果真结束
.如果 (是否为北京时间)
    初始时间 ＝ 到时间 (“1970-01-01 08:00:00”)
.否则
    初始时间 ＝ 到时间 (“1970-01-01 00:00:00”)
.如果结束
.如果真 (是否为空 (是否为秒))
    是否为秒 ＝ 真
.如果真结束
.如果 (是否为秒)
    返回 (取时间间隔 (时间值, 初始时间, #秒))
.否则
    返回 (取时间间隔 (时间值, 初始时间, #秒) × 1000)
.如果结束
返回 (取时间间隔 (时间值, 初始时间, #秒))

.子程序 Unix时间戳记反转, 日期时间型, , 将标准UNIX使用的格林威治时间戳记转到易系统时间日期格式
.参数 时间戳记值, 长整数型, , 要转换的时间戳记值
.参数 是否为秒, 逻辑型, 可空, 时间戳记值单位 真：秒  假：毫秒   默认为真
.参数 是否为北京时间, 逻辑型, 可空, 默认为真，
.局部变量 初始时间, 日期时间型

.如果真 (是否为空 (是否为北京时间))
    是否为北京时间 ＝ 真
.如果真结束
.如果 (是否为北京时间)
    初始时间 ＝ 到时间 (“1970-01-01 08:00:00”)
.否则
    初始时间 ＝ 到时间 (“1970-01-01 00:00:00”)
.如果结束
.如果真 (是否为空 (是否为秒))
    是否为秒 ＝ 真
.如果真结束
.如果 (是否为秒)
    返回 (增减时间 (初始时间, #秒, 时间戳记值))
.否则
    返回 (增减时间 (初始时间, #秒, 时间戳记值 ÷ 1000))
.如果结束
返回 (增减时间 (初始时间, #秒, 时间戳记值))

.版本 2
.支持库 eAPI

.全局变量 应用目录, 文本型
.全局变量 全_版本信息, 文件版本信息
.全局变量 全_指令_一图, 文本型
.全局变量 全_指令_最新, 文本型
.全局变量 全_指令_点图, 文本型
.全局变量 全_指令_搜图, 文本型
.全局变量 全_指令_设置类型, 文本型
.全局变量 全_指令_设置返回数量, 文本型
.全局变量 全_指令_设置NSFW, 文本型
.全局变量 全_指令_点图姬, 文本型
.全局变量 全_排行榜_类型, 文本型
.全局变量 全_排行榜_返回数量, 文本型
.全局变量 全_杂项_NSFW, 文本型
.全局变量 全_fromGroup, 文本型
.全局变量 全_fromQQ, 文本型

.版本 2

.常量 插件信息, "<文本长度: 1134>", , V9
.常量 PIXIV_HELP, "<文本长度: 1250>"
.常量 PIXIV_O, "<文本长度: 629>"
.常量 PIXIV_E_O, "<文本长度: 226>"
